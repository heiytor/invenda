// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	hash "github.com/heiytor/invenda/api/pkg/hash"
	mock "github.com/stretchr/testify/mock"
)

// Hash is an autogenerated mock type for the Hash type
type Hash struct {
	mock.Mock
}

// Compare provides a mock function with given fields: str, _a1
func (_m *Hash) Compare(str string, _a1 string) bool {
	ret := _m.Called(str, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Compare")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(str, _a1)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// New provides a mock function with given fields: str, opt
func (_m *Hash) New(str string, opt *hash.Options) string {
	ret := _m.Called(str, opt)

	if len(ret) == 0 {
		panic("no return value specified for New")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string, *hash.Options) string); ok {
		r0 = rf(str, opt)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NewHash creates a new instance of Hash. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHash(t interface {
	mock.TestingT
	Cleanup(func())
}) *Hash {
	mock := &Hash{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
